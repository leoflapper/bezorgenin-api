<?php

namespace App\Repositories;

use App\Models\Company;
use App\Models\Kitchen;
use App\Query\CompanyQueryBuilder;
use Illuminate\Http\Request;

/**
 * Class CompanyRepository
 * @package App\Repositories
 * @version March 16, 2020, 7:20 pm UTC
*/

class CompanyRepository extends BaseRepository
{
    /**
     * @var array
     */
    protected $fieldSearchable = [
        'name',
        'first_name',
        'last_name',
        'delivery_costs',
        'min_order_amount',
        'email',
        'telephone',
        'iban',
        'kvk',
        'vat_id'
    ];

    /**
     * @param Request $request
     * @return CompanyQueryBuilder|\Illuminate\Database\Eloquent\Builder[]|\Illuminate\Database\Eloquent\Collection
     */
    public function getQueryByRequest(Request $request)
    {
        $companiesQuery = CompanyQueryBuilder::create()
            ->allQuery([],
                $request->get('skip'),
                $request->get('limit')
            )
            ->byAppDomain($request->header('AppDomain', ''));

//        $latitude = 53.1917548;
//        $longitude =  5.8013954;
        if($request->query('order_by') === 'coordinates' && $request->header('latitude') &&  $request->header('longitude')) {
            $companiesQuery->orderByCoordinates($request->header('latitude'), $request->header('longitude'))  ;
        } else {
            $companiesQuery->query()->orderBy('companies.name', 'asc');
        }
        return $companiesQuery;
    }

    /**
     * @param int $id
     * @param array $columns
     * @return \Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Eloquent\Builder[]|\Illuminate\Database\Eloquent\Collection|\Illuminate\Database\Eloquent\Model|object|null
     */
    public function find($id, $columns = ['*'])
    {
        if(!$company = parent::find($id, $columns)) {
            $company = $this->model->newQuery()->where('slug', $id)->first($columns);
        }

        return $company;
    }

    /**
     * @param int $companyId
     * @return bool
     */
    private function authUserHasCompany(int $companyId): bool
    {
        return (bool)auth()->user()->companies()->where('id', $companyId)->first();
    }

    /**
     * Return searchable fields
     *
     * @return array
     */
    public function getFieldsSearchable()
    {
        return $this->fieldSearchable;
    }

    /**
     * Configure the Model
     **/
    public function model()
    {
        return Company::class;
    }

    public function create($input)
    {
        $input = $this->formatInputFields($input);
        return parent::create($input);
    }

    public function update($input, $id)
    {
        if(!auth()->user()->hasRole('admin')) {
            if(!$this->authUserHasCompany($id)) {
                return null;
            }
        }

        $input = $this->formatInputFields($input);

        /**
         * @var $model Company
         */
        $model = parent::update($input, $id); // TODO: Change the autogenerated stub
        if(isset($input['kitchens'])) {
            if($items = Kitchen::query()->find($input['kitchens'])) {
                $model->kitchens()->sync($items);
            }
        }

        return $model;
    }

    public function delete($id)
    {
        if(!auth()->user()->hasRole('admin')) {
            if(!$this->authUserHasCompany($id)) {
                return null;
            }
        }

        $company = $this->find($id);
        if(parent::delete($id)) {
            $company->meals()->delete();
            $company->address()->delete();
        }

        return true;
    }

    /**
     * @param array $input
     * @return array
     */
    private function formatInputFields(array $input): array
    {
        if(isset($input['delivery_costs'])) {
            $input['delivery_costs'] = (float)str_replace(',', '.', $input['delivery_costs']);
        }

        if(isset($input['min_order_amount'])) {
            $input['min_order_amount'] = (float)str_replace(',', '.', $input['min_order_amount']);
        }

        if(isset($input['image_url'])) {
            $input['image_url'] = str_replace('http://', 'https://', $input['image_url']);
        }

        return $input;
    }
}
